同理心：（調查）

定義問題：（找動詞：歸納、追問）
1. 看是否為同樣的流程

發想：
1. 要夠多的idea，就會有更好的神經網路，因為以人為中心
2. 把idea分享，得到使用者回饋

proto：
不用精細

envisioning:
找人->列願景(量化)，確認手段、目標

planning:
1.故事(情境)->2.模組(資料庫)->3.實作細節(產品)
1.1調查: 
smart原則：數據化、時間概念
什麼人，什麼情境，接近我們產品，怎麼使用從開始到結束
搜集資料：商業、應用程式、操作流程、技術
搜集方法：
1.2分析:
1.3發展新情節:
現在情節、未來情節：找動詞名詞形容詞、定義模組

dev：
測試：（回發想）
git blame找誰寫的
git fork把專案fork出去在request由源頭merge

穩定化：
風險管理：
識別問題－標的
危害評估－標準：機率*危害程度
事件－測試方式與時機
當下決定(正面－錯誤通報與解決SOP、避開、接受)
學到經驗－建立測試環境: 單元測試

車一台100-120
租1.5吃0.6必需0.4 - 2.5車0.2
60-80退休480

錯誤：
語法、環境、邏輯
語法錯誤不能build
bug誰提報，追蹤號碼，誰除錯
4.0以上的bug
永遠思考平行處理

測試類：
策略－能否看到原始碼
時程－alpha工程師, beta跟測試部門, 封測有使用者, 公測行銷活動
在大專測試，年底系統最薄弱，11月上線
作法－

壓縮->備份->加密->解密->還原要大家到期
快捷鍵所有資料truncate ctrl f10消失、物理抹除用其他檔案蓋
把檔案copy到硬碟深處自保

提款：驗證、資料傳輸、數鈔票、吐單據
使用者ui->元件控管->呼叫底層function

單元測試：phpcake, code insector, overflow, wrong splitter
回歸測試：bug重測(1.人的習慣2.不是真的解決只是隱藏)
效能：多快
壓力：有壓力多快
安全：系統安全漏洞：信賴、穩定、外洩、偷改、偷看、看不懂、不受干擾
穩定：需要的時候在(trigger)
ab測試：二選一

圓流程：讀檔案前應該確認有沒有檔案，永遠備援多給一份




